@page "/profiles/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class=" = " card_title">Profiles</h3>"
<br />
<a href="/profiles/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Profile
</a>
@if (Profiles == null)
{
    <div class="alert alert-info">Loading Profiles...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var profile in Profiles)
            {
                <tr>
                    <td>@profile.Id</td>
                    <td>
                        <a href="profiles/view/@profile.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="profiles/edit/@profile.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(profile.Id))">
                            <span class="oi oi-delete"></span>"
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<Profile>? Profiles;

    protected async override Task OnInitializedAsync()
    {
        Profiles = await _client.GetFromJsonAsync<List<Profile>>($"{Endpoints.ProfilesEndpoint}");
    }

    async Task Delete(int ProfileID)
    {
        if (Profiles != null)
        {
            var profile = Profiles.First(q => q.Id == ProfileID);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {profile.Id}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ProfilesEndpoint}/{ProfileID}");
                await OnInitializedAsync();
            }
        }
    }
}