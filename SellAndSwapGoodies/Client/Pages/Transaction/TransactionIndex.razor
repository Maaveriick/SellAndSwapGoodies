@page "/transactions/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable
@using SellAndSwapGoodies.Client.Services

<h3 class=" = " card_title">Transactions</h3>"
<br />
<a href="/transactions/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Transaction
</a>
@if (Transactions == null)
{
    <div class="alert alert-info">Loading Transactions...</div>
}
else
{
    <table class="table table-responsive" id="transactionsTable">
        <thead>
            <tr>
                <th>CreditCardName</th>
                <th>CreditCardExpiryDate</th>
                <th>CreditCardNumber</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in Transactions)
            {
                <tr>
                    <td>@transaction.CreditCardName</td>
                    <td>@transaction.CreditCardExpiryName</td>
                    <td>@transaction.CreditCardNumber</td>
                    <td>
                        <a href="transactions/view/@transaction.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="transactions/edit/@transaction.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(transaction.Id))">
                            <span class="oi oi-delete"></span>"
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<Transaction>? Transactions;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Transactions = await _client.GetFromJsonAsync<List<Transaction>>($"{Endpoints.TransactionsEndpoint}");
    }

    async Task Delete(int TransactionID)
    {
        if (Transactions != null)
        {
            var transaction = Transactions.First(q => q.Id == TransactionID);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {transaction.CreditCardName}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.TransactionsEndpoint}/{TransactionID}");
                await OnInitializedAsync();
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#transactionsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#transactionsTable");
    }
}