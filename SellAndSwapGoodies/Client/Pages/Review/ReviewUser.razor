@page "/users/review/{id:int}"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3>Reviews</h3>

<a href="/reviews/createReview/@id" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Review
</a>
<br />
<br />

@if (Reviews == null)
{
    <div class="alert alert-info">Loading Review...</div>
}
else
{
    var userReviews = Reviews.Where(r => r.UserID == id).ToList();
    if (userReviews.Any())
    {
        var averageRating = userReviews.Average(ur => ur.Rating);
        <div style="display: flex; align-items: center;">
            <img src="@userReviews.FirstOrDefault()?.User?.ProfilePicture" alt="" style="width: 70px; height: 70px; object-fit: cover; border-radius: 50%;" />
            <div style="margin-left: 10px;">
                <div style="display: flex; align-items: center;">
                    <span>Average Rating:</span>
                    <span style="font-weight: bold;">@averageRating.ToString("F2")</span>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning">No reviews found for this user.</div>
    }


        <table class="table table-responsive">
            <thead>
                <tr>
                    <th>Review Rating</th>
                    <th>Review</th>
                    <th>Timestamp</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var review in Reviews.Where(r => r.UserID == id))
                {
                    <tr>
                        <td>
                            @for (int i = 0; i < review.Rating; i++)
                            {
                                <i class="bi bi-star-fill"></i>
                            }
                        </td>
                        <td>@review.ReviewText</td>
                        <td>@review.ReviewTime</td>
                        <td>
                            <a href=" /reviews/view/@review.Id" class=" btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href=" /reviews/edit/@review.Id" class=" btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(() => Delete(review.Id))">
                                <span class="oi oi-delete"></span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

@code {
    [Parameter] public int id { get; set; }
    private List<Review>? Reviews;
    private List<User>? Users;

    protected async override Task OnInitializedAsync()
    {
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
        Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");

        if (Reviews != null && Reviews.Any(u => u.Id == id))
        {
            var review = Reviews.First(u => u.Id == id);
            review.AverageRating = await CalculateAverageRating(review.Id);
            StateHasChanged();
        }
    }
    private async Task<double> CalculateAverageRating(int userId)
    {
        try
        {
            var userReviews = Reviews?.Where(r => r.UserID == userId).ToList();
            if (userReviews?.Any() == true)
            {
                userReviews.ForEach(r => r.AverageRating = userReviews.Average(ur => ur.Rating));
                Console.WriteLine($"userId: {userId}, userReviews: {userReviews?.Count}, averageRating: {userReviews.Average(ur => ur.Rating)}");
            }
            return userReviews?.Average(ur => ur.Rating) ?? 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calculating average rating: {ex.Message}");
            return 0;
        }
    }

    async Task Delete(int reviewId)
    {
        var review = Reviews.First(q => q.Id == reviewId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {review.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}");
            await OnInitializedAsync();
        }
    }
}