@page "/reviews/create/"
@inject HttpClient _client
@inject NavigationManager _navManager
<h3 class=" card.title"> Create New Reviews</h3>
<hr />
<br />
<EditForm Model="@review" OnValidSubmit="CreateNewReview">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="form-group">
		<label>User:</label>
		<div>
			<InputSelect @bind-Value="review.UserID" class="form-control">
				<option value="">-- Select User --</option>
				@if (Users != null)
				{
					foreach (var user in Users)
					{
						<option value="@user.Id">@user.Name</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => review.UserID)" />
		</div>
	</div>

	<div class="form-group">
		<label> Review: </label>
		<div>
			<div>
				<InputText @bind-Value="review.ReviewText" class="form-control">
					<ValidationMessage For="@(() => review.ReviewText)" />
				</InputText>
			</div>
		</div>
	</div>


	<div class="form-group">
		<label> Rating: </label>
		<div>
			<div>
				<InputNumber @bind-Value="review.Rating" class="form-control">
					<ValidationMessage For="@(() => review.Rating)" />
				</InputNumber>
			</div>
		</div>
	</div>
	<div class="form-group">
		<label> DateIn: </label>
		<div>
			<div>
				<InputDate @bind-Value="review.DateIn" class="form-control">
					<ValidationMessage For="@(() => review.DateIn)" />
				</InputDate>
			</div>
		</div>
	</div>


	<button type="submit" class="btn btn-success btn-block">
		Create Review
	</button>
</EditForm>

@code {
	Review review = new Review();

	private IList<Review>? Reviews;
	private IList<User>? Users;

	protected async override Task OnInitializedAsync()
	{
		Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
		Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
	}

	private async Task CreateNewReview()
	{
		await _client.PostAsJsonAsync(Endpoints.ReviewsEndpoint, review);
		_navManager.NavigateTo("/reviews");
	}
}