@page "/reviews/createReview/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager
<h3 class=" card.title"> Create New Reviews</h3>
<hr />
<br />
<EditForm Model="@review" OnValidSubmit="CreateNewReview">
	<DataAnnotationsValidator />
	<ValidationSummary />


	<div class="form-group">
		<label> Rating: </label>
		<div>
			<div>
				<InputSelect @bind-Value="review.Rating" class="form-control">
					<option value="">-- Select Rating --</option>
					<option value="1"> &#9733;</option>
					<option value="2"> &#9733;&#9733;</option>
					<option value="3"> &#9733;&#9733;&#9733;</option>
					<option value="4"> &#9733;&#9733;&#9733;&#9733;</option>
					<option value="5"> &#9733;&#9733;&#9733;&#9733;&#9733;</option>
				</InputSelect>
			</div>
		</div>
	</div>

	<div class="form-group">
		<label> Review: </label>
		<div>
			<div>
				<InputText @bind-Value="review.ReviewText" class="form-control">
					<ValidationMessage For="@(() => review.ReviewText)" />
				</InputText>
			</div>
		</div>
	</div>


	<button type="submit" class="btn btn-success btn-block">
		Create Review
	</button>
	<BackToList Target="reviews" />
</EditForm>

@code {
	Review review = new Review();

	private IList<User>? Users;
	private DateTime _displaydate;

	[Parameter] public int id { get; set; }

	private async Task CreateNewReview()
	{
		review.UserID = id;
		review.ReviewTime = _displaydate;
		await _client.PostAsJsonAsync(Endpoints.ReviewsEndpoint, review);
		_navManager.NavigateTo("/users/review/" + id.ToString());


	}

	protected async override Task OnInitializedAsync()
	{
		Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
		_displaydate = DateTime.Now;
	}

}
