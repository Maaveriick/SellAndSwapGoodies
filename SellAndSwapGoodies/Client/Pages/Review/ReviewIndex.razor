@page "/reviews/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable
@using SellAndSwapGoodies.Client.Services

<h3 class=" = " card_title">Reviews</h3>"
<br />
<a href="/reviews/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Review
</a>
@if (Reviews == null)
{
    <div class="alert alert-info">Loading Reviews...</div>
}
else
{
    <table class="table table-responsive" id="reviewsTable">
        <thead>
            <tr>
                <th>User</th>
                <th>Rating</th>
                <th>Review</th>
                <th>Timestamp</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var review in Reviews)
            {
                <tr>
                    <td>@review.User?.Name</td>
                    <td>@review.Rating</td>
                    <td>@review.ReviewText</td>
                    <td>@review.ReviewTime</td>
                    <td>
                        <a href="reviews/view/@review.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="reviews/edit/@review.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(review.Id))">
                            <span class="oi oi-delete"></span>"
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<Review>? Reviews;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
    }

    async Task Delete(int ReviewID)
    {
        if (Reviews != null)
        {
            var review = Reviews.First(q => q.Id == ReviewID);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {review.Rating}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{ReviewID}");
                await OnInitializedAsync();
            }
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#reviewsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#reviewsTable");
    }
}
