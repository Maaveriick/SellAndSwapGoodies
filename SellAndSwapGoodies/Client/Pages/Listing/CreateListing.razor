@page "/listings/create/"
@inject HttpClient _client
@inject NavigationManager _navManager
<h3 class=" card.title"> Create New Listings</h3>
<hr />
<br />
<EditForm Model="@listing" OnValidSubmit="CreateNewListing">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="form-group">
		<label>Seller:</label>
		<div>
			<InputSelect @bind-Value="listing.UserID" class="form-control">
				<option value="">-- Select User --</option>
				@if (Users != null)
				{
					foreach (var user in Users)
					{
						<option value="@user.Id">@user.Name</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => listing.UserID)" />
		</div>
	</div>

	<div class="form-group">
		<label> Name: </label>
		<div>
			<div>
				<InputText @bind-Value="listing.Name" class="form-control">
					<ValidationMessage For="@(() => listing.Name)" />
				</InputText>
			</div>
		</div>
	</div>

	<div class="form-group">
		<label>Category:</label>
		<div>
			<InputSelect @bind-Value="listing.CategoryID" class="form-control">
				<option value="">-- Select Category --</option>
				@if (Categories != null)
				{
					foreach (var category in Categories)
					{
						<option value="@category.Id">@category.Name</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => listing.CategoryID)" />
		</div>
	</div>

	<div class="form-group">
		<label> Location: </label>
		<div>
			<div>
				<InputText @bind-Value="listing.Location" class="form-control">
					<ValidationMessage For="@(() => listing.Location)" />
				</InputText>
			</div>
		</div>
	</div>

		<div class="form-group">
			<label> Price: </label>
			<div>
				<div>
					<InputNumber @bind-Value="listing.Price" class="form-control">
						<ValidationMessage For="@(() => listing.Price)" />
					</InputNumber>
				</div>
			</div>
		</div>
	<br />

		<div class="form-group">
			<label>Condition:</label>
			<div>
				<InputSelect @bind-Value="listing.ConditionID" class="form-control">
					<option value="">-- Select Condition --</option>
					@if (Conditions != null)
					{
						foreach (var condition in Conditions)
						{
							<option value="@condition.Id">@condition.Name</option>
						}
					}
				</InputSelect>
				<ValidationMessage For="@(() => listing.CategoryID)" />
			</div>
		</div>

	<br />
	<div class="form-group">
		<label> Description: </label>
		<div>
			<div>
				<InputText @bind-Value="listing.Description" class="form-control">
					<ValidationMessage For="@(() => listing.Description)" />
				</InputText>
			</div>
		</div>
	</div>

	<button type="submit" class="btn btn-success btn-block">
		Create Listing
	</button>
	<BackToList Target="listings" />
</EditForm>

@code {
	Listing listing = new Listing();

	private IList<Listing>? Listings;
	private IList<Category>? Categories;
	private IList<Condition>? Conditions;
	private IList<User>? Users;

	protected async override Task OnInitializedAsync()
	{
		Listings = await _client.GetFromJsonAsync<List<Listing>>($"{Endpoints.ListingsEndpoint}");
		Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
		Conditions = await _client.GetFromJsonAsync<List<Condition>>($"{Endpoints.ConditionsEndpoint}");
		Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
	}

	private async Task CreateNewListing()
	{
		await _client.PostAsJsonAsync(Endpoints.ListingsEndpoint, listing);
		_navManager.NavigateTo("/listings");
	}
}