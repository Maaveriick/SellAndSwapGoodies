@page "/offers/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable
@using SellAndSwapGoodies.Client.Services

<h3 class="card-title">Offers</h3>
<a href="/offers/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Offers
</a>
<br />
<br />

@if (Offers == null)
{
    <div class="alert alert-info">Loading Offer...</div>
}
else
{
    <table class="table table-responsive" id="offersTable">
        <thead>
            <tr>
                <th>Buyer</th>
                <th>Seller</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var offer in Offers)
            {
                <tr>
                    <td>@offer.Sender?.Name</td>
                    <td>@offer.Receiver?.Name</td>
                    <td>
                        <a href="/offers/chat/@offer.Id" class="btn btn-primary">
                            <i class="bi bi-chat-dots-fill"></i>
                            Users Chat
                        </a>
                        <a href="chats/" class="btn btn-primary">
                            <i class="bi bi-chat"></i>
                            Chat
                        </a>
                        <a href="/offers/edit/@offer.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(offer.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Offer>? Offers;
    protected override async Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Offers = await _client.GetFromJsonAsync<List<Offer>>($"{Endpoints.OffersEndpoint}");
    }

    private async Task Delete(int offerId)
    {
        if (Offers != null)
        {
            var offer = Offers.First(q => q.Id == offerId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {offer.Sender?.Name}?");

            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.OffersEndpoint}/{offerId}");
                await OnInitializedAsync();
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#offersTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#offersTable");
    }

}
