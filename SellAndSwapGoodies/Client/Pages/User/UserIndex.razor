@page "/users/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class=" = " card_title">Users</h3>"
<br />
<a href="/users/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New User
</a>
@if (Users == null)
{
    <div class="alert alert-info">Loading Users...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Age</th>
                <th>Gender</th>
                <th>Email Address</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users)
            {
                <tr>
                    <td>@user.Name</td>
                    <td>@user.Age</td>
                    <td>@user.Gender</td>
                    <td>@user.EmailAddress</td>
                    <td>
                        <a href="users/view/@user.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="users/edit/@user.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(user.Id))">
                            <span class="oi oi-delete"></span>"
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<User>? Users;

    protected async override Task OnInitializedAsync()
    {
        Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
    }

    async Task Delete(int UserID)
    {
        if (Users != null)
        {
            var user = Users.First(q => q.Id == UserID);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete this user?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.UsersEndpoint}/{UserID}");
                await OnInitializedAsync();
            }
        }
    }
}