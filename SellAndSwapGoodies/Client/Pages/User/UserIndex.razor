@page "/users/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable
@using SellAndSwapGoodies.Client.Services

<h3 class="card-title">Users</h3>

<a href="/users/create" class="btn btn-secondary">
    <i class="bi bi-person-plus-fill"></i>
    Create New User
</a>
<br />
<br />

@if (Users == null)
{
    <div class="alert alert-info">Loading Users...</div>
}
else
{
    <table class="table table-responsive" id="usersTable">
        <thead>
            <tr>
                <th>ProfilePicture</th>
                <th>Name</th>
                <th>Age</th>
                <th>Gender</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users)
            {
                <tr>
                    <td><img src="@user.ProfilePicture" alt="" style="width: 200px; height: 150px;" /></td>
                    <td>@user.Name</td>
                    <td>@user.Age</td>
                    <td>@user.Gender</td>
                    <td>
                        <a href=" /users/review/@user.Id" class=" btn btn-primary">
                            <span class="oi oi-book"></span>
                            Show Review
                        </a>
                        <a href=" /users/edit/@user.Id" class=" btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(user.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
}

@code {
    private List<User> Users;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
    }

    async Task Delete(int userId)
    {
        var user = Users.First(q => q.Id == userId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {user.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.UsersEndpoint}/{userId}");
            await OnInitializedAsync();
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#usersTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#usersTable");
    }

}