@page "/users/create/"
@inject HttpClient _client
@inject NavigationManager _navManager
<h3 class=" card.title"> Create New Users</h3>
<hr />
<br />
<EditForm Model="@user" OnValidSubmit="CreateUser">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="form-group">
		<label> Name: </label>
		<div>
			<InputText @bind-Value="user.Name" class="form-control">
				<ValidationMessage For="@(() => user.Name)" />
			</InputText>
		</div>
	</div>
	<div class="form-group">
		<label> Age: </label>
		<div>
			<InputNumber @bind-Value="user.Age" class="form-control">
				<ValidationMessage For="@(() => user.Age)" />
			</InputNumber>
		</div>
	</div>
	<div class="form-group">
		<label> Gender: </label>
		<div>
			<InputText @bind-Value="user.Gender" class="form-control">
				<ValidationMessage For="@(() => user.Gender)" />
			</InputText>
		</div>
	</div>

	<div class="form-group">
		<label> Password: </label>
		<div>
			<InputText @bind-Value="user.Password" class="form-control">
				<ValidationMessage For="@(() => user.Password)" />
			</InputText>
		</div>
	</div>
	<div class="form-group">
		<label> Email Address: </label>
		<div>
			<InputText @bind-Value="@user.EmailAddress" class="form-control">
				<ValidationMessage For="@(() => user.EmailAddress)" />
			</InputText>
		</div>
	</div>
	<button type="submit" class="btn btn-success btn-block">
		Create User
	</button>
</EditForm>

@code {
	User user = new User();

	private IList<User>? Users;


	protected async override Task OnInitializedAsync()
	{
		Users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
	}

	private async Task CreateUser()
	{
		await _client.PostAsJsonAsync(Endpoints.UsersEndpoint, user);
		_navManager.NavigateTo("/users");
	}
}
